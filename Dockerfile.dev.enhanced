# Dockerfile optimizado para desarrollo
FROM node:20-alpine

# Instalar herramientas adicionales para desarrollo
RUN apk add --no-cache \
    git \
    curl \
    bash \
    vim \
    postgresql-client

# Establecer directorio de trabajo
WORKDIR /app

# Crear usuario no-root para desarrollo
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copiar archivos de configuración de dependencias
COPY package*.json ./
COPY tsconfig*.json ./

# Instalar dependencias con cache optimizado
RUN npm ci --only=production --silent
RUN npm ci --only=development --silent

# Instalar herramientas globales de desarrollo
RUN npm install -g nodemon concurrently

# Copiar código fuente
COPY . .

# Crear directorios necesarios
RUN mkdir -p dist logs uploads temp

# Configurar permisos
RUN chown -R nextjs:nodejs /app
USER nextjs

# Exponer puertos
# 3000: Frontend (Vite)
# 5001: Backend (Express)
# 3001: HMR (Hot Module Replacement)
# 9229: Node.js debugger
EXPOSE 3000 5001 3001 9229

# Variables de entorno para desarrollo
ENV NODE_ENV=development
ENV DEBUG=*
ENV CHOKIDAR_USEPOLLING=true
ENV WATCHPACK_POLLING=true

# Healthcheck para desarrollo
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/api/health || exit 1

# Script de inicio para desarrollo
CMD ["npm", "run", "dev"]