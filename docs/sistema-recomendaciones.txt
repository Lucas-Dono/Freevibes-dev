# Sistema Profesional de Recomendaciones Musicales

## Descripción General

Este documento describe la arquitectura e implementación de un sistema profesional de recomendaciones musicales para la aplicación Music Player. El sistema está diseñado para proporcionar recomendaciones de alta calidad, incluso cuando algunas APIs externas fallan o no están disponibles, gracias a su arquitectura multicapa y estrategias de fallback.

## Objetivos del Sistema

- Proporcionar recomendaciones de canciones por género musical
- Mantener alta disponibilidad ante fallos de APIs externas
- Optimizar rendimiento mediante caché y tiempos de respuesta
- Combinar resultados de múltiples fuentes para mejorar la calidad
- Proporcionar resultados relevantes incluso para géneros menos populares

## Arquitectura

El sistema implementa una arquitectura de microservicios multicapa:

```
┌────────────────────────────┐
│ Cliente (Next.js Frontend) │
└────────────┬───────────────┘
             ↓
┌────────────────────────────┐
│    API Gateway (Next.js)   │
└────────────┬───────────────┘
             ↓
┌─────────────────────────────────────────────────┐
│        Orquestador de Recomendaciones          │
├─────────┬─────────┬─────────┬─────────┬────────┤
│ Spotify │ Deezer  │ Last.fm │ Caché   │ Auto-  │
│ Service │ Service │ Service │ Distrib.│ Healing│
└─────────┴─────────┴─────────┴─────────┴────────┘
```

### Componentes Principales

1. **API Gateway** (`src/app/api/spotify/route.ts`)
   - Recibe peticiones del cliente
   - Procesa parámetros y realiza validaciones
   - Enruta al servicio adecuado
   - Formatea respuestas y maneja errores

2. **Orquestador de Recomendaciones** (`src/services/recommendations/multi-source-recommender.ts`)
   - Coordina peticiones a múltiples fuentes
   - Implementa estrategias de combinación de resultados
   - Gestiona caché y recuperación inteligente
   - Proporciona recomendaciones fallback cuando es necesario

3. **Servicios de Fuentes** (`src/services/recommendations/sources/`)
   - `spotify.ts`: Adaptador para recomendaciones de Spotify
   - `deezer.ts`: Adaptador para recomendaciones de Deezer
   - `lastfm.ts`: Adaptador para recomendaciones de Last.fm
   - Cada servicio implementa su propia lógica de fallback

4. **Sistema de Caché** (`src/lib/cache/`)
   - Interfaz abstracta para diferentes implementaciones
   - Implementación local para desarrollo
   - Preparado para Redis en producción

## Flujo de Ejecución

1. El cliente solicita recomendaciones a través del endpoint `/api/spotify?action=genre-recommendations&genre=rock`.

2. El API Gateway valida la solicitud y la reenvía al orquestador de recomendaciones.

3. El orquestador:
   - Intenta recuperar resultados de caché si están disponibles
   - Si no hay caché, solicita recomendaciones a todas las fuentes en paralelo
   - Aplica la estrategia elegida (secuencial o combinación)
   - Si los resultados son insuficientes, busca con géneros relacionados
   - Almacena los resultados en caché para futuras solicitudes

4. Si todas las fuentes fallan, se devuelven datos estáticos fallback.

## Estrategias de Recomendación

El sistema implementa dos estrategias principales:

### 1. Estrategia Secuencial (por defecto)

- Intenta obtener recomendaciones de la primera fuente
- Si la primera fuente falla o no proporciona suficientes resultados, pasa a la siguiente
- Prioriza la velocidad y consistencia de la experiencia de usuario

### 2. Estrategia de Combinación

- Solicita recomendaciones a todas las fuentes simultáneamente
- Combina y ordena los resultados en base a pesos ponderados
- Elimina duplicados y ordena según relevancia
- Prioriza la calidad y diversidad de las recomendaciones

## Características Avanzadas

### Sistema de Caché Distribuida

- Almacena recomendaciones con un TTL de 24 horas
- Reduce carga en APIs externas
- Mejora tiempos de respuesta
- Proporciona resultados incluso cuando las APIs no están disponibles

### Control de Timeout

- Cada fuente tiene un tiempo máximo de espera configurado
- Previene que una fuente lenta bloquee todo el sistema
- Permite fallback rápido a otras fuentes

### Deduplicación Inteligente

- Identifica pistas duplicadas aunque provengan de diferentes fuentes
- Unifica resultados para proporcionar variedad al usuario

### Expansión por Géneros Relacionados

- Si un género tiene pocos resultados, busca en géneros relacionados
- Mapa predefinido de relaciones entre géneros para mejorar relevancia
- Asegura que siempre se proporcione un número mínimo de recomendaciones

## APIs Externas Utilizadas

### 1. Spotify
- **Ventajas**: Amplio catálogo, alta calidad de metadatos
- **Limitaciones**: Dependencia del estado de autenticación, endpoints deprecados
- **Fallback**: Búsqueda por término cuando las recomendaciones fallan

### 2. Deezer
- **Ventajas**: API estable, sin requisitos de autenticación para búsquedas básicas
- **Limitaciones**: Menor popularidad en algunos mercados
- **Implementación**: Búsqueda con términos relacionados cuando el género exacto no existe

### 3. Last.fm
- **Ventajas**: Excelente para géneros específicos y nichos, tags comunitarios
- **Limitaciones**: No proporciona streaming, solo metadatos
- **Características**: Búsqueda por tag y descubrimiento de tags similares

## Código Clave

### Orquestador Multi-Fuente

El corazón del sistema se encuentra en `getRecommendationsByGenre()` en `multi-source-recommender.ts`:

```typescript
export async function getRecommendationsByGenre(
  genre: string, 
  limit: number = 30,
  options: GetRecommendationsOptions = {}
): Promise<Track[]> {
  // ... (ver implementación completa en el código)
  
  // 1. Intentar recuperar de caché
  // 2. Solicitar a múltiples fuentes en paralelo con timeout
  // 3. Aplicar estrategia secuencial o de combinación
  // 4. Buscar con géneros relacionados si los resultados son insuficientes
  // 5. Almacenar resultados en caché
  // 6. Devolver resultados
}
```

### Adaptadores de Fuentes

Cada adaptador implementa una interfaz común y proporciona:
- Función principal de recomendaciones
- Métodos alternativos para búsqueda
- Conversión al formato Track unificado
- Datos fallback cuando todo falla

### Sistema de Caché

```typescript
export interface CacheInterface {
  get(key: string): Promise<string | null>;
  set(key: string, value: string, ttl?: number): Promise<void>;
  del(key: string): Promise<void>;
}
```

## Configuración y Personalización

### Opciones de API

El endpoint acepta los siguientes parámetros:

- `genre`: (Requerido) El género musical para el que se solicitan recomendaciones
- `limit`: (Opcional) Número máximo de resultados (default: 30)
- `combine`: (Opcional) Si es "true", utiliza la estrategia de combinación
- `source`: (Opcional) Fuente preferida ("spotify", "deezer", "lastfm")

Ejemplo:
```
/api/spotify?action=genre-recommendations&genre=rock&limit=20&combine=true&source=lastfm
```

### Configuración de Fuentes

Las fuentes se pueden configurar modificando el array `SOURCES` en `multi-source-recommender.ts`:

```typescript
const SOURCES: RecommendationSource[] = [
  { name: 'spotify', service: spotifyRecommender.getRecommendationsByGenre, weight: 1.0, timeout: 5000 },
  { name: 'deezer', service: deezerRecommender.getRecommendationsByGenre, weight: 0.8, timeout: 6000 },
  { name: 'lastfm', service: lastfmRecommender.getRecommendationsByGenre, weight: 0.7, timeout: 7000 }
];
```

Ajustando:
- `weight`: Influencia de cada fuente en la combinación de resultados
- `timeout`: Tiempo máximo de espera por fuente

## Mejoras Futuras

1. **Personalización por Usuario**
   - Incorporar historial de escucha y preferencias del usuario
   - Ajustar pesos dinámicamente según comportamiento

2. **APIs Adicionales**
   - Integrar YouTube Music API para mayor cobertura
   - Explorar APIs de recomendación basadas en ML como Gracenote

3. **Machine Learning**
   - Implementar un sistema de recomendación local basado en el contenido
   - Utilizar TensorFlow.js para análisis de preferencias

4. **Optimización de Rendimiento**
   - Implementar workers para procesamiento en segundo plano
   - Precalcular recomendaciones para géneros populares

5. **Telemetría Avanzada**
   - Integrar con servicios de monitorización
   - Analizar calidad de recomendaciones y engagement

## Conclusión

El sistema de recomendaciones implementado proporciona una solución robusta y escalable para descubrir música por género, con especial énfasis en alta disponibilidad y calidad de resultados. La arquitectura multicapa y las estrategias de fallback aseguran que los usuarios siempre reciban recomendaciones relevantes, incluso cuando algunas APIs externas experimentan problemas. 