# ESPECIFICACIONES UX/UI - REPRODUCTOR DE MÚSICA SPOTIFY/YOUTUBE

## FLUJO DE USUARIO PRINCIPAL

### 1. FLUJO DE AUTENTICACIÓN

#### Pantalla de Inicio sin autenticar
- **Estilo**: Minimalista pero impactante, con animaciones sutiles
- **Elementos principales**:
  - Logo de MusicVerse con animación de morphing
  - Mensaje claro: "Conecta con Spotify para comenzar"
  - Botón grande CTAs "Conectar con Spotify" con efecto de pulsación
  - Breve explicación de los beneficios (acceso a millones de canciones, etc.)
  - Animación de ondas de audio reactivas en el fondo (suaves, no intrusivas)
  - Partículas flotantes sutiles que representan música

#### Modal de Autenticación
- **Proceso**:
  - Al hacer clic en "Conectar con Spotify", se abre ventana OAuth
  - Indicador de carga animado durante la autenticación
  - Transición suave a la interfaz principal después de la autenticación
  - Mensaje de bienvenida personalizado con nombre de usuario

#### Estado de error de autenticación
- **Feedback visual**: Mensaje de error con icono animado de sacudida
- **Opciones**: Botón "Reintentar" con efecto de ondulación al hover
- **Ayuda**: Enlace a ayuda/FAQ si hay problemas persistentes

### 2. INTERFAZ PRINCIPAL POST-AUTENTICACIÓN

#### Dashboard Central (Reemplaza la página Home)
- **Concepto**: Centrado en escuchar música rápidamente, menos en "presentación"
- **Principios**:
  - Acceso rápido a música relevante para el usuario
  - Interfaz dinámica y personalizada que evoluciona según el uso
  - Elementos interactivos que responden visualmente a las acciones
  - Micro-animaciones en todos los componentes interactivos

#### Estructura Global
- Layout de tres partes con animaciones de transición entre secciones:
  - Sidebar lateral (escritorio) / Navegación inferior (móvil) con indicador activo animado
  - Área de contenido principal con scroll infinito y transiciones entre secciones
  - Reproductor persistente con visualizadores de audio reactivos

#### Secciones de Contenido (Dashboard)
1. **"Continuar Escuchando"** - Primera sección, prominente
   - Historial reciente con indicadores de progreso
   - Carrusel horizontal con efecto parallax
   - Animación de "levitación" al hover
   - Últimas 6 canciones/álbumes reproducidos
   - Botón play principal con animación de ondas al iniciar reproducción

2. **"Tu Rotación Personal"** (Generado por IA)
   - Playlist personalizada que se actualiza diariamente
   - Efecto de "revelación" animado al cargar la sección
   - Tarjetas de canción con efectos 3D al interactuar
   - Visualización de atributos musicales (energía, tempo, etc.) con gráficos animados
   - Botón "Actualizar mix" con animación de rotación

3. **"Artistas Seguidos - Novedades"**
   - Releases nuevos de artistas que el usuario sigue
   - Indicador "NUEVO" con brillo pulsante
   - Avatares de artistas con efecto de "despertar" al entrar en viewport
   - Efecto de "conexión" visual entre artistas relacionados (líneas dinámicas)

4. **"Para Ti"** (Recomendaciones)
   - Sistema de tarjetas con efectos de profundidad y sombras dinámicas
   - Animación revelatoria de "barajado" al cambiar las recomendaciones
   - Indicadores de por qué se recomienda (basado en X artista, etc.)
   - Interacción "swipe" para seguir descubriendo (con tutoriales interactivos)

5. **"Zona de Descubrimiento"**
   - Géneros y estados de ánimo como burbujas flotantes interactivas
   - Las burbujas se reorganizan con física realista al interactuar
   - Filtro visual interactivo que cambia los colores/temas según selección
   - Efecto de "explosión" suave al seleccionar una categoría

## COMPONENTES CLAVES ANIMADOS

### Reproductor Interactivo Mejorado

#### Reproductor Minimizado (Persistente)
- **Altura**: 72px con expansión fluida al interactuar
- **Efectos**: 
  - Barra de progreso con animación de partículas siguiendo la reproducción
  - Efecto de "onda" al hacer clic en cualquier parte de la barra
  - Portada del álbum con rotación 3D sutil constante
  - Transición morphing suave entre estados (play/pausa)
  - Volumen con visualización de ondas sonoras al ajustar
  - Efecto "bounce" sutil en controles al hacer clic

#### Reproductor Expandido (Vista Completa)
- **Activación**: Deslizar hacia arriba desde el reproductor minimizado
- **Transición**: Expansión fluida con efecto parallax de elementos
- **Características animadas**:
  - Portada de álbum con efecto de vinilo giratorio realista (33rpm)
  - Efecto tilt-shift 3D al mover cursor/teléfono (giroscopio)
  - Visualizador de audio sincrónizado con la música:
    - Modo "Espectro" con barras que responden a frecuencias
    - Modo "Orbital" con partículas circulares pulsantes
    - Modo "Líquido" con formas orgánicas que fluyen con el ritmo
    - Modo "Geométrico" con formas que se transforman en patrones
  - Letras de canciones con:
    - Efecto de typing natural en tiempo real
    - Resaltado de palabras con pulsación rítmica
    - Efectos de transición entre estrofas
  - Fondo dinámico que cambia sutilmente según la energía de la canción

### Sistema de Navegación Animado

#### Sidebar/Navbar
- **Efectos**:
  - Indicador de selección con animación de fluido entre elementos
  - Iconos con micro-animaciones al hover (escala, rotación suave)
  - Efecto de "resplandor" en la sección activa
  - Colapso/expansión con animación de acordeón
  - Indicadores de notificación con pulsación suave

#### Transiciones entre páginas
- **Sistema**: Transiciones coordinadas con efectos de:
  - "Page reveal" con efecto de barrido direccional
  - Elementos que mantienen continuidad entre páginas
  - Efecto de profundidad (ciertos elementos se mueven a diferente velocidad)
  - Cambios de color temáticos con transición suave según contenido

### Interacciones de Colección

#### Biblioteca personal
- **Organización**: Sistema de grid con:
  - Reordenación con física realista y efecto de "inercia"
  - Filtrado con animación de "clasificación" visual
  - Expansión/colapso de categorías con efecto accordion
  - Vista de cuadrícula/lista con transición morphing
  - Agrupación dinámica con efecto de "magnetismo" entre elementos relacionados

#### Playlists Avanzadas
- **Creación**: Interfaz drag & drop con:
  - Elementos arrastrados con física realista y sombras dinámicas
  - Efecto de "atracción" hacia zonas de destino
  - Feedback háptico visual cuando un elemento encaja
  - Zonas "receptoras" que se iluminan al arrastrar elementos compatibles
  - Indicadores de orden con numeración animada

## MICRO-INTERACCIONES DETALLADAS

### Sistema de feedback inmediato
- **Botones**: 
  - Efecto de ondulación desde el punto de clic
  - Escala reactiva dependiendo de la importancia del botón
  - Cambio de color con transición suave
  - Sombras dinámicas que responden a la presión/duración
  
- **Elementos deslizables**:
  - Efecto de inercia y rebote natural
  - Indicadores de "fin de lista" con efecto elástico
  - Feedback de velocidad con blur dinámico
  - Audio feedback sutil (opcional, configurable)

- **Tarjetas y contenedores**:
  - Efecto parallax al desplazamiento
  - Elevación dinámica según estado (hover, activo, arrastrado)
  - Desenfoque gradual de elementos fuera de foco
  - Sombras que responden a la dirección de la iluminación simulada

### Animaciones de estado
- **Carga de contenido**:
  - Esqueletos de carga con efecto de "pulso" natural
  - Aparición secuencial de elementos (cascada)
  - Transición suave de placeholder a contenido real
  - Indicador de progreso circular para operaciones largas
  
- **Estados vacíos**:
  - Ilustraciones animadas que responden al input del usuario
  - Suggestions que aparecen con efecto "pop" secuencial
  - Animaciones contextuales según la sección vacía
  - Patrones de fondo animados para mantener dinamismo

## ANIMACIONES AVANZADAS POR SECCIÓN

### Exploración Musical
- **Mapa de navegación musical**:
  - Visualización estilo "galaxia musical" donde géneros y artistas forman constelaciones
  - Zoom fluido entre niveles de detalle (género -> artista -> álbum -> canción)
  - Líneas de conexión que se dibujan dinámicamente entre elementos relacionados
  - Partículas que fluyen entre nodos indicando popularidad/relevancia
  - Efectos de "gravedad" al interactuar con clusters

### Página de Artista Dinámica
- **Header con parallax avanzado**:
  - Múltiples capas de profundidad que se mueven a diferente velocidad
  - Elementos que cambian de opacidad según posición de scroll
  - Foto de artista con efectos de profundidad y separación de capas
  - Nombre del artista con efectos de iluminación dinámica
  - Contador de reproducciones con animación de incremento en tiempo real

- **Discografía interactiva**:
  - Organización cronológica con línea de tiempo animada
  - Álbumes que rotan en 3D al hover mostrando contraportada
  - Transiciones coordinadas entre vistas (grid/timeline/lista)
  - Sistema de "películas" horizontal para navegar entre álbumes
  - Efectos de "surgimiento" al cargar nuevos elementos

### Visualizador Social
- **Actividad de amigos**:
  - Feed en tiempo real con animaciones de "aparición" para nuevas actividades
  - Avatares con indicadores de actividad pulsantes
  - Líneas de conexión entre usuarios escuchando lo mismo
  - "Ondas" de actividad que se propagan desde usuarios activos
  - Efectos de "fundido" entre estados de actividad

- **Sesiones compartidas**:
  - Visualización de usuarios con avatares orbitando alrededor de la canción actual
  - Indicadores de reacción con explosiones de partículas personalizadas
  - Sistema de votación con animación de "llenado" para opciones
  - Chat con efectos de typing y burbujas animadas
  - Transiciones entre canciones con efecto de "todos juntos"

## ESTRATEGIA DE ANIMACIÓN Y RENDIMIENTO

### Sistema de priorización
- **Niveles de animación**:
  - Críticas: Feedback de usuario, estado de sistema
  - Importantes: Transiciones entre páginas, estados de contenido
  - Decorativas: Efectos de fondo, animaciones ambientales
  - Opcionales: Efectos avanzados de partículas, simulaciones físicas

- **Adaptación a dispositivos**:
  - Detección automática de capacidades de renderizado
  - Fallbacks inteligentes para dispositivos de menor rendimiento
  - Optimización de efectos según input (touch vs mouse)
  - Versiones reducidas pero conceptualmente idénticas para móvil

### Sistema de diseño de animación
- **Biblioteca documentada**:
  - Curvas de animación estandarizadas para coherencia
  - Duraciones predefinidas según tipo de interacción
  - Estilos de easing categorizados por intención
  - Sistema de tokens de animación coordinado con tokens de diseño

- **Principios guía**:
  - Propósito: Cada animación debe tener un objetivo claro
  - Continuidad: Mantener coherencia espacial entre estados
  - Jerarquía: Las animaciones reflejan la importancia del elemento
  - Originalidad: Efectos memorables sin sacrificar usabilidad
  - Contexto: Adaptados al estado emocional/energía de la música

## GUÍA DE ESTILO PRINCIPAL (ACTUALIZADA)

### Paleta de Colores (Ampliada para Animaciones)

#### Gradientes Animados
- **Transiciones de Energía**: 
  - Baja energía: Gradiente suave de `#0F172A` a `#312E81` (azul medianoche a índigo)
  - Alta energía: Gradiente vibrante de `#4F46E5` a `#EC4899` (indigo a rosa)
  - Transición entre estados con duración de 1.5s

#### Efectos de Luz
- **Acentos luminosos**:
  - Glow primario: `#7C3AED` con radio 15px y opacidad 0.6
  - Glow secundario: `#06B6D4` con radio 12px y opacidad 0.5
  - Glow de acento: `#EC4899` con radio 10px y opacidad 0.6
  - Animación de intensidad: variación de opacidad entre 0.2 y 0.7 (ciclo de 2-3s)

### Efectos Visuales (Expandidos)

#### Sistema de Partículas
- **Partículas de fondo**:
  - Tamaño: 2-5px
  - Colores: Variantes transparentes de la paleta primaria
  - Comportamiento: Movimiento lento y orgánico, responden sutilmente al audio
  - Densidad: Variable según sección (5-20 partículas visibles)

#### Efectos de Material
- **Glassmorphism+**:
  - Base: Fondo semi-transparente (rgba(15, 23, 42, 0.6))
  - Reflejos: Overlay sutil con gradiente diagonal (opacidad 0.05-0.1)
  - Desenfoque: 8-16px con animación sutil al enfocar elementos
  - Bordes: Brillo variable en bordes según estado (0.05-0.2 opacidad)

#### Sistema de Profundidad
- **Capas Z con parallax**:
  - Fondo: Movimiento más lento (factor 0.1-0.2)
  - Contenido: Movimiento moderado (factor 0.4-0.6)
  - Elementos destacados: Movimiento más rápido (factor 0.7-0.9)
  - Transición entre capas: Cubic-bezier(0.16, 1, 0.3, 1) para suavidad

## IMPLEMENTACIÓN TÉCNICA

### Tecnología de Animaciones
- **React + Framer Motion**: Para la mayoría de animaciones de interfaz
- **GSAP**: Para secuencias complejas y animaciones coordinadas
- **Three.js**: Para visualizadores 3D y efectos de audio avanzados
- **Lottie**: Para animaciones ilustrativas prediseñadas
- **CSS Animations**: Para efectos simples y estados básicos

### Estrategia de implementación
- **Sistema por capas**:
  1. Base: Animaciones esenciales de feedback y estado
  2. Mejorada: Transiciones y efectos de continuidad
  3. Premium: Efectos avanzados de partículas y 3D (aplicados condicionalmente)

- **Optimización**:
  - Uso de `will-change` estratégicamente
  - Animaciones en GPU cuando sea posible
  - Throttling/debouncing para eventos frecuentes
  - Caching de estados animados intermedios
  - Reducción de cálculos en dispositivos de bajo rendimiento

## ESPECIFICACIONES UX/UI - REPRODUCTOR DE MÚSICA SPOTIFY/YOUTUBE

## GUÍA DE ESTILO PRINCIPAL

### Paleta de Colores

#### Colores Primarios
- **Gradiente Base**: #0F172A (azul medianoche) a #312E81 (índigo profundo)
- **Acento Primario**: #7C3AED (violeta vibrante)
  - Variantes claras: #8B5CF6, #A78BFA
  - Variantes oscuras: #6D28D9, #5B21B6
- **Acento Secundario**: #06B6D4 (turquesa eléctrico)
  - Variantes claras: #22D3EE, #67E8F9
  - Variantes oscuras: #0891B2, #0E7490
- **Acento Terciario**: #EC4899 (rosa vibrante)
  - Variantes claras: #F472B6, #F9A8D4
  - Variantes oscuras: #DB2777, #BE185D

#### Escalas de Grises
- **Negro Rico**: #030712 (para fondos profundos)
- **Gris Oscuro**: #1E293B (para elementos de UI y tarjetas)
- **Gris Medio**: #475569 (para textos secundarios)
- **Gris Claro**: #94A3B8 (para bordes y separadores)
- **Casi Blanco**: #F8FAFC (para textos principales)

#### Colores Funcionales
- **Éxito**: #10B981 (verde esmeralda)
- **Advertencia**: #F59E0B (ámbar)
- **Error**: #EF4444 (rojo)
- **Información**: #3B82F6 (azul)

### Tipografía

#### Fuentes
- **Titulares**: Inter (peso 700-900 para énfasis)
- **Cuerpo**: Outfit (peso 300-500 para texto regular)
- **Detalles/Números**: Space Grotesk (para contadores, tiempos y estadísticas)

#### Escalas Tipográficas
- **Titulares Grandes**: 36px/2.25rem (móvil), 48px/3rem (escritorio)
- **Titulares Medianos**: 24px/1.5rem (móvil), 30px/1.875rem (escritorio)
- **Titulares Pequeños**: 18px/1.125rem (móvil), 20px/1.25rem (escritorio)
- **Cuerpo Principal**: 16px/1rem
- **Cuerpo Secundario**: 14px/0.875rem
- **Etiquetas/Botones**: 14px/0.875rem (móvil), 16px/1rem (escritorio)
- **Micro-texto**: 12px/0.75rem

#### Espaciado
- Sistema de espaciado basado en incrementos de 4px (0.25rem)
- Espaciado entre secciones: 32px/2rem (móvil), 48px/3rem (escritorio)
- Espaciado entre elementos: 16px/1rem
- Espaciado interno (padding): 16px/1rem a 24px/1.5rem

### Efectos Visuales
- **Sombras**: 
  - Ligera: 0 2px 4px rgba(0,0,0,0.1)
  - Media: 0 4px 6px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.06)
  - Profunda: 0 10px 15px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05)
  - Elevación: 0 20px 25px rgba(0,0,0,0.15), 0 10px 10px rgba(0,0,0,0.05)
  
- **Glassmorphism**:
  - Fondo: rgba(15, 23, 42, 0.6)
  - Desenfoque: blur(16px)
  - Borde: 1px solid rgba(255, 255, 255, 0.1)
  
- **Gradientes**:
  - Tarjetas de artista: Gradiente linear del color principal a transparente
  - Botones: Gradiente sutil del tono principal a su variante
  - Fondos premium: Mezcla de 3 colores con animación sutil
  
- **Animaciones Globales**:
  - Duración de transiciones: 200-300ms
  - Curva de animación estándar: cubic-bezier(0.16, 1, 0.3, 1)
  - Curva de rebote: cubic-bezier(0.34, 1.56, 0.64, 1)

## ESPECIFICACIONES POR PÁGINA

### 1. PANTALLA DE INICIO (HOME)

#### Estructura Global
- Layout de tres partes:
  - Sidebar lateral (escritorio) / Navegación inferior (móvil)
  - Área de contenido principal con scroll
  - Reproductor persistente (inferior o minimizado)

#### Barra de Navegación
- **Posición**: Lateral izquierda en desktop, inferior en móvil
- **Color**: Gradiente vertical #0F172A a #1E293B con 75% opacidad
- **Efecto**: Glassmorphism (fondo semi-transparente con blur)
- **Elementos**:
  - Logo (animación sutil al hover)
  - Íconos de navegación con etiquetas
  - Indicador de sección activa (barra lateral violeta)
  - Avatar de usuario con menú desplegable
  - Botón "Crear Playlist" con icono "+"
  - Mini-widgets de amigos en línea (opcional)

#### Área de Héroe
- **Altura**: 40vh en desktop, 30vh en móvil
- **Color**: Gradiente dinámico basado en la imagen del artista/álbum destacado
- **Contenido**: 
  - Carrusel automático de contenido destacado
  - Título con tipografía extra-grande (48px/3rem)
  - Botón CTA principal "Reproducir" con icono
  - Botón secundario "Guardar" o "Ver más"
  - Indicadores de paginación animados

#### Secciones de Contenido
1. **"Para Ti" (Recomendaciones)**
   - **Layout**: Carrusel horizontal con tarjetas
   - **Tarjetas**: Altura 220px, ancho 180px, borde radius 12px
   - **Color tarjeta**: Gradiente vertical sutil #1E293B a #0F172A
   - **Información**: Portada álbum, título, artista, duración
   - **Hover**: Elevación con sombra, botón play aparece sobre la portada
   - **Microinteracción**: Zoom sutil al hover
   
2. **"Tendencias" (Popular ahora)**
   - **Layout**: Lista horizontal con rankings
   - **Estilo**: Números grandes (Space Grotesk 36px), portadas con overlay degradado
   - **Color**: Cada item con un toque de color basado en la portada
   - **Badges**: Nuevos lanzamientos con etiqueta "Nuevo" en acento terciario
   
3. **"Artistas que te gustan"**
   - **Layout**: Grid circular para avatares
   - **Estilo**: Fotos circulares con borde de 2px en color acento
   - **Hover**: Elevación y efecto de iluminación desde atrás
   - **Transición**: Crossfade al navegar entre artistas
   
4. **"Géneros"**
   - **Layout**: Grid de 2x2 (móvil) o 4x2 (desktop)
   - **Estilo**: Tarjetas con ilustraciones personalizadas por género
   - **Colores**: Cada género con su esquema de color característico
     - Electrónica: Turquesa/Azul eléctrico (#06B6D4 a #2563EB)
     - Rock: Rojo/Negro (#EF4444 a #1E293B)
     - Pop: Rosa/Violeta (#EC4899 a #8B5CF6)
     - Hip Hop: Ámbar/Naranja (#F59E0B a #EA580C)
     - Etc.

5. **"Historial y Estadísticas"**
   - **Layout**: Timeline visual horizontal
   - **Estilo**: Nodos conectados con líneas, miniaturas circulares
   - **Color**: Línea base gris (#475569), nodos en acento primario
   - **Animación**: Efecto de "typewriter" al cargar la timeline
   - **Estadísticas**: Pequeños widgets circulares para métricas (tiempo escuchado, artistas top)

### 2. REPRODUCTOR DE MÚSICA

#### Reproductor Minimizado (Persistente)
- **Altura**: 72px
- **Posición**: Fijado en la parte inferior
- **Color**: Glassmorphism oscuro (#0F172A con 85% opacidad, blur 12px)
- **Distribución**:
  - Izquierda: Portada miniatura (tamaño 52x52px) con info de canción
  - Centro: Controles de reproducción
  - Derecha: Volumen, opciones, botón expandir
- **Controles**: 
  - Botones principales: Anterior, Play/Pausa, Siguiente
  - Botones secundarios: Aleatorio, Repetir
  - Barra de progreso interactiva con tiempo actual/total
- **Animaciones**:
  - Barra de progreso con brillo que sigue al cursor
  - Botón play/pausa con morphing suave
  - Transición fluida al cambiar canción

#### Reproductor Expandido
- **Layout**: Pantalla completa con efecto blur de fondo
- **Fondo**: Imagen de álbum amplificada y difuminada con overlay degradado
- **Distribución**: 
  - 60% para visuales (portada/visualizador)
  - 40% para controles e información
- **Portada del álbum**:
  - Tamaño grande (70vh max)
  - Animación de vinilo giratorio (CSS transform)
  - Reflejo sutil en superficie
  - Efecto 3D al interactuar (tilt.js)
- **Visualizador de audio**:
  - Múltiples estilos seleccionables:
    - Espectro de barras (acento primario a secundario)
    - Ondas circulares (acento terciario)
    - Partículas reactivas (multicolor)
    - Formas geométricas (simplista)
  - Sincronización con beats y frecuencias
  - Adaptación de colores basada en la portada
- **Sección de Letras**:
  - Tipografía clara (Outfit, 18px/1.125rem)
  - Línea actual resaltada (color acento primario)
  - Sincronización precisa con timestamps
  - Efecto de transición al cambiar de línea
  - Opción para modo karaoke (highlight de palabras)
- **Controles Avanzados**:
  - Ecualizador con presets (pop, rock, clásica)
  - Control de velocidad de reproducción
  - Modo "Dormir" con temporizador animado
  - Opciones de audio (calidad, normalización)
- **Información contextual**:
  - Metadatos del álbum (año, discográfica, género)
  - Botones para seguir al artista, guardar álbum
  - Estadísticas de reproducción (veces escuchada)
  - Canciones similares recomendadas (miniaturas)

### 3. PÁGINA DE BÚSQUEDA

#### Barra de Búsqueda
- **Posición**: Centrada en la parte superior, sticky
- **Dimensiones**: 80% ancho (desktop), 90% (móvil)
- **Estilo**: 
  - Input grande (altura 56px) con borde radius 28px
  - Icono de búsqueda animado (rotación sutil al focus)
  - Fondo con efecto glaciar (#1E293B con borde sutil brillante)
  - Placeholder con animación de fade
- **Estados**:
  - Normal: Borde ligero (#475569)
  - Focus: Brillo exterior en color acento (#7C3AED)
  - Typing: Animación de pulso en borde
  - Error: Borde rojo con shake animation

#### Sugerencias en Tiempo Real
- **Layout**: Dropdown con bordes redondeados
- **Animación**: Aparición con slide-down y fade
- **Contenido**:
  - Resultados agrupados por tipo (canciones, artistas, álbumes)
  - Icono específico para cada tipo
  - Previsualización de portada miniatura
  - Texto resaltado del término buscado

#### Resultados de Búsqueda Completos
- **Layout**: Sistema de pestañas con indicador de selección animado
- **Categorías**:
  - Todo (vista combinada)
  - Canciones
  - Artistas
  - Álbumes
  - Playlists
  - Podcasts
- **Filtros avanzados**:
  - Barra lateral colapsable
  - Filtros por duración, popularidad, fecha
  - Chips seleccionables para género
  - Selector de orden (alfabético, fecha, popularidad)

#### Sección "Todo"
- **Layout**: Diseño en bloques por categoría
- **Estilo**: Encabezados de sección con línea decorativa
- **Top Result**:
  - Tarjeta destacada (2x tamaño normal)
  - Color de acento basado en la portada
  - Botón CTA "Reproducir" destacado
  - Animación al aparecer (scale-up sutil)

#### Sección "Canciones"
- **Layout**: Lista vertical
- **Elementos**:
  - Número de track (opcional)
  - Miniatura del álbum
  - Título y artista
  - Álbum (solo desktop)
  - Duración
  - Menú contextual (3 puntos)
- **Interacciones**: 
  - Hover: Background #1E293B con aparición de botón play
  - Arrastrable: Cursor especial y feedback visual
  - Click-derecho: Menú contextual completo

#### Sección "Artistas"
- **Layout**: Grid de tarjetas
- **Tarjetas**:
  - Forma circular u ovalada
  - Foto del artista con efecto viñeta
  - Gradiente sutil en la parte inferior
  - Nombre y número de seguidores
  - Botón "Seguir" con estado toggle
- **Hover**:
  - Elevación con sombra
  - Aparición de reproductores mini para top tracks

#### Sección "Álbumes"
- **Layout**: Grid de portadas
- **Tarjetas**:
  - Proporción cuadrada
  - Sombra decorativa basada en color dominante
  - Info concisa (título, artista, año)
  - Etiqueta para álbumes nuevos
- **Hover**:
  - Flip animation o elevación
  - Preview de tracks principales (truncados)

#### Resultados Vacíos
- **Estilo**: Ilustración personalizada
- **Mensajes**: Copywriting amigable con recomendaciones
- **Acciones**: Sugerencias de búsquedas relacionadas
- **Animación**: Ilustración con microinteracciones

### 4. PÁGINA DE ARTISTA

#### Header Inmersivo
- **Altura**: 50vh con parallax
- **Fondo**: Imagen del artista a ancho completo con efecto gradiente
- **Overlay**: Gradiente vertical con transparencia a color base
- **Contenido**:
  - Nombre del artista (tipografía XL)
  - Foto circular premium (borde luminoso)
  - Estadísticas (oyentes mensuales, seguidores)
  - Botón "Reproducir" principal
  - Botón "Seguir" secundario
  - Botones de compartir y opciones

#### Sección "Populares"
- **Layout**: Lista vertical compacta
- **Limitación**: Top 5 canciones con opción "Ver más"
- **Elementos**:
  - Ranking con números estilizados
  - Información de tendencia (subiendo/bajando)
  - Indicador de popularidad (barras de 3 niveles)
  - Reproducciones totales en formato compacto

#### Sección "Discografía"
- **Layout**: Pestañas de navegación horizontal
- **Categorías**: 
  - Álbumes
  - Singles y EPs
  - Apariciones
  - Compilaciones
- **Visualización**:
  - Timeline visual organizada por año
  - Agrupación por década (colapsable)
  - Portadas con efecto carrusel 3D

#### Sección "Biografía"
- **Layout**: Área expandible con "Ver más"
- **Estilo**: 
  - Tipografía legible (Outfit 16px)
  - Primera letra capitular (drop cap)
  - Separación en párrafos con espaciado adecuado
  - Citas destacadas en estilo blockquote
- **Media**: 
  - Galería de fotos históricas
  - Timeline de carrera
  - Premios y reconocimientos

#### Sección "Artistas Relacionados"
- **Layout**: Carrusel horizontal
- **Estilo**: 
  - Tarjetas circulares con efecto de profundidad
  - Líneas de conexión que indican el tipo de relación
  - Información de relevancia (% de similitud)
- **Interacción**: 
  - Hover muestra géneros compartidos
  - Click expande información de relación
  - Zoom al área de relación entre artistas

#### Sección "Multimedia"
- **Layout**: Grid mixto (2-3 columnas)
- **Contenido**:
  - Videos musicales
  - Entrevistas
  - Presentaciones en vivo
  - Podcasts con apariciones
- **Reproducción**: 
  - Preview en hover
  - Expansión modal para reproducción
  - Transición suave al expandir

### 5. PÁGINA DE ÁLBUM

#### Header con Portada Premium
- **Layout**: Portada a la izquierda, metadatos a la derecha
- **Portada**: 
  - Tamaño grande (300x300px min)
  - Efecto 3D con profundidad
  - Sombra dinámica basada en color de portada
  - Animación sutil de hover (tilt)
- **Metadatos**:
  - Título con tipografía destacada
  - Artista con link
  - Información secundaria (año, duración, género)
  - Badges para álbumes especiales (aniversario, deluxe)
- **Acciones**:
  - Botones principales (Reproducir, Guardar)
  - Opciones secundarias (Compartir, Menú)
  - Botón de "Me gusta" con animación de corazón

#### Lista de Canciones
- **Layout**: Lista vertical detallada
- **Elementos**:
  - Número de track
  - Título con features
  - Popularidad (barras o estrellas)
  - Duración
  - "+" para añadir a playlist
- **Indicadores**:
  - Canción actual (highlight completo)
  - Canciones populares (icono de fuego)
  - Canciones explícitas (badge "E")
- **Interacción**:
  - Arrastrable para reordenar en playlists personales
  - Doble click para reproducción inmediata
  - Menú contextual enriquecido

#### Información del Álbum
- **Layout**: Sección expandible
- **Contenido**:
  - Descripción/reseña
  - Créditos detallados (productor, mezcla, etc.)
  - Copyright y sellos discográficos
  - Fecha de lanzamiento original vs. reediciones
- **Estilo**:
  - Información jerárquica con tipografía variada
  - Separadores sutiles entre secciones
  - Links para colaboradores y etiquetas

#### Álbumes Relacionados
- **Layout**: Carrusel horizontal con tarjetas
- **Criterios**: 
  - Mismo artista
  - Mismo género
  - Lanzamientos contemporáneos
  - Influencias directas
- **Conexión visual**:
  - Líneas que indican la relación
  - Etiquetas explicativas ("Mismo productor", "Era similar")

### 6. PÁGINA DE PLAYLIST

#### Header Adaptativo
- **Layout**: Información general a la izquierda, portada a la derecha
- **Portada**:
  - Generada dinámicamente o personalizable
  - Collage de hasta 4 portadas de álbumes incluidos
  - Opción para subir imagen propia
  - Efectos y filtros aplicables
- **Información**:
  - Título editable (inline editing)
  - Descripción con formato
  - Autor con avatar
  - Estadísticas (seguidores, duración total, número de canciones)
  - Fecha de creación y última actualización

#### Controles de Playlist
- **Layout**: Barra de acciones horizontal
- **Acciones Principales**:
  - Reproducir (botón principal)
  - Reproducción aleatoria
  - Guardar a biblioteca
  - Compartir
- **Acciones Secundarias**:
  - Descargar (offline)
  - Editar detalles
  - Colaboración (invitar)
  - Eliminar
- **Visual**:
  - Iconos personalizados por acción
  - Tooltips detallados al hover
  - Feedback animado al hacer clic

#### Lista de Canciones
- Similar a la lista de álbum pero con estas adiciones:
  - Portada de álbum por canción
  - Fecha de adición
  - Nombre de quien añadió (en playlists colaborativas)
  - Indicadores de propiedad (Spotify/Usuario)
- **Ordenación**:
  - Opciones de orden personalizables
  - Orden personalizado con drag & drop
  - Orden inteligente (BPM, estado de ánimo, energía)
- **Filtros**:
  - Búsqueda dentro de la playlist
  - Filtros rápidos (duración, popularidad, fecha)
  - Vista por artista/álbum (agrupación)

#### Estadísticas y Análisis (Premium)
- **Layout**: Panel colapsable o modal
- **Visualizaciones**:
  - Distribución por género (gráfico circular)
  - Timeline por década (histograma)
  - Análisis de características musicales (radar chart)
    - Energía
    - Tempo
    - Bailabilidad
    - Instrumentalidad
    - Valencia (positividad)
- **Recomendaciones basadas en análisis**:
  - Sugerencias para completar la playlist
  - Identificación de outliers
  - "Canciones que faltan" basadas en patrones

#### Modo Colaborativo
- **Layout**: Panel lateral o overlay
- **Características**:
  - Lista de colaboradores con avatares
  - Historial de cambios con timeline
  - Chat integrado o comentarios por canción
  - Indicadores de actividad en tiempo real
- **Controles**:
  - Permisos por usuario (ver, añadir, eliminar, reordenar)
  - Opciones de notificación
  - Invitación vía enlace o directa

### 7. PERFIL DE USUARIO

#### Header de Perfil
- **Layout**: Diseño centrado con información clave
- **Elementos**:
  - Foto de perfil grande (editable)
  - Nombre de usuario (editable)
  - Estadísticas principales (playlists, artistas, canciones)
  - Insignias y logros (usuario premium, años en plataforma)
  - Botones sociales (seguir, mensajes)
- **Personalización**:
  - Opciones de tema color
  - Imagen de fondo personalizable
  - "Actualmente escuchando" con animación

#### Sección "Tu Música"
- **Layout**: Pestañas de navegación horizontal
- **Categorías**:
  - Playlists
  - Artistas guardados
  - Álbumes guardados
  - Canciones favoritas
  - Podcasts seguidos
- **Visualización**:
  - Grid adaptativo
  - Opciones de vista (lista/grid)
  - Ordenación personalizable
  - Búsqueda y filtros

#### Actividad de Escucha
- **Layout**: Timeline vertical
- **Contenido**:
  - Historial de reproducciones
  - Descubrimientos recientes
  - Destacados semanales
  - "En repetición" (canciones más escuchadas)
- **Visualización**:
  - Agrupación por día/semana/mes
  - Visualización de tendencias (gráficos)
  - Compartible como "story" o publicación

#### Amigos y Social
- **Layout**: Sección colapsable
- **Contenido**:
  - Amigos activos ahora
  - Actividad reciente de amigos
  - Recomendaciones de amigos
  - Playlists colaborativas
- **Interacción**:
  - Opciones para escuchar juntos
  - Reacciones a actividad de amigos
  - Comparación de gustos musicales

### 8. VISTA DE CONFIGURACIÓN

#### Layout General
- **Estructura**: Navegación lateral izquierda, contenido principal derecha
- **Estilo**: Interfaz clara y organizada con whitespace adecuado
- **Responsividad**: En móvil, navegación se convierte en dropdown

#### Secciones de Configuración (Contenido principal)
1. **Cuenta**
   - Información personal
   - Planes y suscripciones
   - Facturación
   - Seguridad y privacidad
   
2. **Preferencias**
   - Idioma y región
   - Calidad de streaming
   - Descargas
   - Dispositivos conectados
   
3. **Reproductor**
   - Ecualizador avanzado (con presets)
   - Crossfade y normalizacion
   - Visualización y animaciones
   - Letras y karaoke
   
4. **Notificaciones**
   - Configuración por tipo
   - Frecuencia y formato
   - Canales (email, push, in-app)
   
5. **Privacidad**
   - Perfil público/privado
   - Actividad de escucha
   - Datos y personalización
   - Integraciones de terceros

#### Elementos de UI
- **Toggles**: Estilo moderno con animación fluida
- **Sliders**: Interactivos con preview en tiempo real
- **Dropdowns**: Animación smooth con opciones claras
- **Feedback**: Notificaciones sutiles al guardar cambios

## COMPONENTES REUTILIZABLES

### 1. Tarjetas de Contenido
- **Variantes**:
  - Tarjeta de canción
  - Tarjeta de álbum
  - Tarjeta de artista
  - Tarjeta de playlist
- **Estados**:
  - Normal
  - Hover
  - Active
  - Disabled
- **Comportamiento responsivo**
- **Esqueletos de carga**

### 2. Listas y Grids
- **Tipos**:
  - Lista simple
  - Lista detallada
  - Grid de tarjetas
  - Grid mixto
- **Variantes**:
  - Con drag & drop
  - Con selección múltiple
  - Con reordenación
  - Con agrupación
- **Estados de carga y vacíos**

### 3. Reproductores
- **Tamaños**:
  - Mini (inline)
  - Barra persistente
  - Expandido
  - Pantalla completa
- **Controles y visualización**
- **Integración con sistema de notificaciones**

### 4. Elementos de Navegación
- **Menús**:
  - Barra lateral
  - Navegación de pestañas
  - Breadcrumbs
  - Dropdown
- **Comportamiento responsivo**
- **Estados y animaciones**

### 5. Elementos de Feedback
- **Notificaciones**:
  - Toast
  - Banners
  - Modales
  - Popovers
- **Indicadores de estado**:
  - Carga
  - Éxito
  - Error
  - Advertencia
- **Animaciones y temporización**

## DIRECTRICES DE INTERACCIÓN

### Accesibilidad
- Contraste mínimo 4.5:1 para texto
- Soporte total para navegación con teclado
- Etiquetas ARIA para elementos interactivos
- Mensajes de estado para lectores de pantalla
- Modo de alto contraste opcional

### Responsive y Adaptativo
- Breakpoints principales:
  - Mobile: 320px - 480px
  - Tablet: 481px - 768px
  - Desktop: 769px - 1279px
  - Widescreen: 1280px+
- Consideraciones por dispositivo
- Layout fluido vs. adaptativos

### Animaciones y Rendimiento
- Priorización de animaciones esenciales
- Reducción de animaciones según preferencias de usuario
- Técnicas de optimización para dispositivos de gama baja
- Precargas y lazy loading estratégicos

## PATRONES DE IMPLEMENTACIÓN

### Principios de Código
- Componentes modulares y reutilizables
- Sistema de design tokens centralizado
- Nomenclatura BEM para CSS/Tailwind
- Separación de lógica y presentación

### Guías de Desarrollo
- Responsive-first approach
- Accesibilidad integrada desde el inicio
- Testing en múltiples dispositivos/navegadores
- Documentación inline y storybook

### Principios de Performance
- Core Web Vitals como métricas principales
- Optimización de imágenes y assets
- Code-splitting y lazy-loading
- Caché estratégico

## ROADMAP DE IMPLEMENTACIÓN

### Fase 1: Fundamentos
- Sistema de diseño básico
- Componentes core
- Layout principal
- Autenticación

### Fase 2: Funcionalidad Esencial
- Reproductor básico
- Búsqueda
- Navegación entre vistas
- Integración API

### Fase 3: Características Premium
- Visualizaciones avanzadas
- Animaciones y micro-interacciones
- Características sociales
- Personalización

### Fase 4: Pulido y Optimización
- Refinamiento de UX
- Optimización de rendimiento
- Pruebas de usuario
- Lanzamiento 

# IMPLEMENTACIÓN TÉCNICA FRONTEND

## Stack Tecnológico Frontend

- **Framework Base**: Next.js 14+ con App Router
- **Lenguaje**: TypeScript estricto para tipo seguro
- **Estilos**: Tailwind CSS + CSS Modules para estilos específicos
- **Animaciones**: Framer Motion para transiciones fluidas
- **Componentes Base**: Radix UI (headless) + componentes personalizados
- **Iconografía**: Lucide Icons + iconos personalizados en SVG
- **Gestión de Estado**: Zustand para estado global, React Query para datos remotos
- **Formularios**: React Hook Form + Zod para validación
- **Testing**: Vitest + Testing Library + Playwright para E2E

## Arquitectura Frontend

### Estructura de Carpetas

```
/app                    # App Router de Next.js
  /api                  # Solo API routes relacionadas con UI
  /(routes)             # Rutas principales /, /search, etc.
/components             # Componentes reutilizables
  /ui                   # Componentes básicos (Button, Card, etc.)
  /player               # Componentes específicos del reproductor
  /search               # Componentes de búsqueda
  /layout               # Componentes estructurales
  /[feature]            # Agrupados por característica
/hooks                  # Custom hooks
/lib                    # Utilidades, helpers, constantes
/store                  # Gestión de estado con Zustand
/styles                 # Estilos globales, variables, mixins
/types                  # Definiciones de TypeScript
/public                 # Assets estáticos
```

### Patrones de Diseño Frontend

1. **Arquitectura de Componentes**:
   - Patrón Atomic Design (átomos, moléculas, organismos)
   - Componentes presentacionales vs. contenedores
   - Composición sobre herencia
   - Prop drilling mínimo con Context API para propósitos específicos

2. **Gestión de Estado**:
   - Zustand para estados globales de UI
   - Estado local con `useState` para componentes simples
   - React Query para gestión de estado servidor/API
   - Patrones de actualización optimista para interacciones fluidas

3. **Estrategia de Renderizado**:
   - Server Components para contenido estático/SEO
   - Client Components para interactividad
   - Streaming para páginas con datos complejos
   - Suspense para carga progresiva

## Implementación de Componentes Core

### Sistema de Diseño

```typescript
// /styles/tokens.ts - Design tokens centralizados
export const tokens = {
  colors: {
    primary: {
      base: '#7C3AED',
      light: '#8B5CF6',
      dark: '#6D28D9',
      // ...más variantes
    },
    // ...otros colores
  },
  spacing: {
    // Sistema de espaciado
  },
  typography: {
    // Sistema tipográfico
  },
  animation: {
    // Duración y curvas de animación
  }
};
```

### Componente PlayerUI

```typescript
// Estructura básica del componente Player
interface PlayerProps {
  mode: 'minimized' | 'expanded' | 'full';
  onModeChange: (mode: PlayerProps['mode']) => void;
}

const Player: React.FC<PlayerProps> = ({ mode, onModeChange }) => {
  // Lógica de componente
  
  // Renderizado condicional basado en modo
  if (mode === 'minimized') {
    return <MinimizedPlayer onExpand={() => onModeChange('expanded')} />;
  }
  
  if (mode === 'expanded') {
    return (
      <ExpandedPlayer 
        onMinimize={() => onModeChange('minimized')}
        onFullscreen={() => onModeChange('full')}
      />
    );
  }
  
  return (
    <FullscreenPlayer onClose={() => onModeChange('expanded')} />
  );
};
```

### Visualizador de Audio

```typescript
// Componente de visualización de audio
interface AudioVisualizerProps {
  audioData: Uint8Array;
  type: 'bars' | 'waves' | 'particles' | 'circular';
  colorScheme?: 'primary' | 'album' | 'custom';
}

const AudioVisualizer: React.FC<AudioVisualizerProps> = ({
  audioData,
  type,
  colorScheme = 'primary'
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  // UseEffect para inicializar y animar canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Configuración basada en tipo de visualizador
    const renderFrame = () => {
      // Lógica de renderizado específica por tipo
      switch(type) {
        case 'bars':
          renderBars(ctx, audioData, colorScheme);
          break;
        case 'waves':
          renderWaves(ctx, audioData, colorScheme);
          break;
        // ...otros tipos
      }
      
      requestAnimationFrame(renderFrame);
    };
    
    renderFrame();
    
    // Cleanup
    return () => {
      // Limpiar animación
    };
  }, [audioData, type, colorScheme]);
  
  return <canvas ref={canvasRef} className="w-full h-full" />;
};
```

## Gestión de Estado UI

### Store del Reproductor

```typescript
// /store/playerStore.ts
interface PlayerState {
  currentTrack: Track | null;
  queue: Track[];
  isPlaying: boolean;
  playerMode: 'minimized' | 'expanded' | 'full';
  playerControls: {
    volume: number;
    isMuted: boolean;
    repeat: 'none' | 'all' | 'one';
    shuffle: boolean;
  };
  visualizerType: 'bars' | 'waves' | 'particles' | 'circular';
  
  // Acciones
  setCurrentTrack: (track: Track) => void;
  togglePlay: () => void;
  nextTrack: () => void;
  previousTrack: () => void;
  setPlayerMode: (mode: PlayerState['playerMode']) => void;
  updateVolume: (volume: number) => void;
  toggleMute: () => void;
  toggleShuffle: () => void;
  setRepeatMode: (mode: PlayerState['playerControls']['repeat']) => void;
  setVisualizerType: (type: PlayerState['visualizerType']) => void;
  addToQueue: (track: Track) => void;
  removeFromQueue: (id: string) => void;
  clearQueue: () => void;
  reorderQueue: (startIndex: number, endIndex: number) => void;
}

export const usePlayerStore = create<PlayerState>((set, get) => ({
  currentTrack: null,
  queue: [],
  isPlaying: false,
  playerMode: 'minimized',
  playerControls: {
    volume: 1,
    isMuted: false,
    repeat: 'none',
    shuffle: false
  },
  visualizerType: 'bars',
  
  // Implementaciones de acciones
  setCurrentTrack: (track) => set({ currentTrack: track, isPlaying: true }),
  togglePlay: () => set(state => ({ isPlaying: !state.isPlaying })),
  nextTrack: () => {
    // Lógica para pasar a siguiente track considerando cola, shuffle, etc.
  },
  previousTrack: () => {
    // Lógica para track anterior
  },
  // ...otras acciones
}));
```

### Store de Búsqueda

```typescript
// /store/searchStore.ts
interface SearchState {
  query: string;
  results: {
    tracks: Track[];
    artists: Artist[];
    albums: Album[];
    playlists: Playlist[];
  };
  filters: {
    type: ('tracks' | 'artists' | 'albums' | 'playlists')[];
    // otros filtros
  };
  loading: boolean;
  history: string[];
  
  // Acciones
  setQuery: (query: string) => void;
  setResults: (results: SearchState['results']) => void;
  setLoading: (loading: boolean) => void;
  addToHistory: (query: string) => void;
  clearHistory: () => void;
  toggleFilter: (filter: string) => void;
}

export const useSearchStore = create<SearchState>((set, get) => ({
  // Estado inicial
  query: '',
  results: { tracks: [], artists: [], albums: [], playlists: [] },
  filters: { type: ['tracks', 'artists', 'albums', 'playlists'] },
  loading: false,
  history: [],
  
  // Acciones
  setQuery: (query) => set({ query }),
  setResults: (results) => set({ results, loading: false }),
  setLoading: (loading) => set({ loading }),
  addToHistory: (query) => {
    // Añadir a historial evitando duplicados
  },
  // ...otras acciones
}));
```

## Implementación de Animaciones

### Sistema de Animaciones

```typescript
// /lib/animations.ts - Configuraciones de animación reutilizables
export const transitions = {
  default: {
    type: "tween",
    ease: [0.16, 1, 0.3, 1],
    duration: 0.3
  },
  bounce: {
    type: "spring",
    stiffness: 260,
    damping: 20
  },
  slide: {
    type: "tween",
    ease: [0.25, 1, 0.5, 1],
    duration: 0.4
  }
};

export const variants = {
  fadeIn: {
    hidden: { opacity: 0 },
    visible: { opacity: 1 }
  },
  slideUp: {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 }
  },
  scale: {
    hidden: { scale: 0.8, opacity: 0 },
    visible: { scale: 1, opacity: 1 }
  },
  // Variantes adicionales para otras animaciones
};
```

### Hook de Animación de Vinilo

```typescript
// /hooks/useVinylAnimation.ts
export function useVinylAnimation(isPlaying: boolean) {
  const vinylRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    const vinyl = vinylRef.current;
    if (!vinyl) return;
    
    if (isPlaying) {
      // Configurar animación de rotación
      vinyl.style.animationPlayState = 'running';
    } else {
      // Pausar animación
      vinyl.style.animationPlayState = 'paused';
    }
  }, [isPlaying]);
  
  return vinylRef;
}
```

## Optimización de Rendimiento

### Estrategias de Carga

```typescript
// /components/ImageLoader.tsx - Ejemplo de componente optimizado para imágenes
import Image from 'next/image';
import { useState } from 'react';

interface ImageLoaderProps {
  src: string;
  alt: string;
  width: number;
  height: number;
  priority?: boolean;
  className?: string;
}

export const ImageLoader: React.FC<ImageLoaderProps> = ({
  src,
  alt,
  width,
  height,
  priority = false,
  className
}) => {
  const [isLoading, setIsLoading] = useState(true);
  
  return (
    <div className={`relative overflow-hidden ${className}`}>
      {isLoading && (
        <div className="absolute inset-0 bg-gradient-to-r from-gray-800 to-gray-700 animate-pulse" />
      )}
      <Image
        src={src}
        alt={alt}
        width={width}
        height={height}
        priority={priority}
        className={`transition-opacity duration-300 ${isLoading ? 'opacity-0' : 'opacity-100'}`}
        onLoadingComplete={() => setIsLoading(false)}
      />
    </div>
  );
};
```

### Virtualización de Listas

```typescript
// /components/VirtualizedList.tsx - Para listas largas
import { useVirtualizer } from '@tanstack/react-virtual';
import { useRef } from 'react';

interface VirtualizedListProps<T> {
  items: T[];
  renderItem: (item: T, index: number) => React.ReactNode;
  height: number;
  itemHeight: number;
}

export function VirtualizedList<T>({
  items,
  renderItem,
  height,
  itemHeight
}: VirtualizedListProps<T>) {
  const parentRef = useRef<HTMLDivElement>(null);
  
  const virtualizer = useVirtualizer({
    count: items.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => itemHeight,
  });
  
  return (
    <div
      ref={parentRef}
      className="overflow-auto"
      style={{ height }}
    >
      <div
        style={{
          height: `${virtualizer.getTotalSize()}px`,
          width: '100%',
          position: 'relative',
        }}
      >
        {virtualizer.getVirtualItems().map((virtualItem) => (
          <div
            key={virtualItem.key}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: `${itemHeight}px`,
              transform: `translateY(${virtualItem.start}px)`,
            }}
          >
            {renderItem(items[virtualItem.index], virtualItem.index)}
          </div>
        ))}
      </div>
    </div>
  );
}
```

## Implementación de Micro-interacciones

### Sistema de Micro-interacciones

```typescript
// /components/ui/InteractiveElement.tsx
import { motion } from 'framer-motion';
import { MouseEvent, ReactNode, useState } from 'react';

interface InteractiveElementProps {
  children: ReactNode;
  onClick?: (e: MouseEvent) => void;
  className?: string;
  effectType?: 'scale' | 'glow' | 'ripple' | 'tilt';
}

export const InteractiveElement: React.FC<InteractiveElementProps> = ({
  children,
  onClick,
  className = '',
  effectType = 'scale'
}) => {
  const [isPressed, setIsPressed] = useState(false);
  
  // Configuración basada en tipo de efecto
  const getAnimationProps = () => {
    switch (effectType) {
      case 'scale':
        return {
          whileHover: { scale: 1.05 },
          whileTap: { scale: 0.95 }
        };
      case 'glow':
        return {
          whileHover: { 
            boxShadow: '0 0 8px rgba(124, 58, 237, 0.6)' 
          },
          whileTap: { 
            boxShadow: '0 0 4px rgba(124, 58, 237, 0.4)' 
          }
        };
      case 'tilt':
        return {
          whileHover: { rotateX: -5, rotateY: 5 },
          whileTap: { rotateX: 0, rotateY: 0 }
        };
      default:
        return {};
    }
  };
  
  return (
    <motion.div
      className={`interactive-element ${className}`}
      onClick={onClick}
      onMouseDown={() => setIsPressed(true)}
      onMouseUp={() => setIsPressed(false)}
      onMouseLeave={() => isPressed && setIsPressed(false)}
      {...getAnimationProps()}
    >
      {effectType === 'ripple' && isPressed && (
        <motion.div
          className="absolute inset-0 bg-white rounded-full opacity-20"
          initial={{ scale: 0 }}
          animate={{ scale: 2, opacity: 0 }}
          transition={{ duration: 0.5 }}
        />
      )}
      {children}
    </motion.div>
  );
};
```

## Accesibilidad Implementada

### Componentes Accesibles

```typescript
// /components/ui/Dropdown.tsx - Ejemplo de componente accesible
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';
import { ReactNode } from 'react';

interface DropdownProps {
  trigger: ReactNode;
  items: {
    id: string;
    label: string;
    icon?: ReactNode;
    onClick: () => void;
    disabled?: boolean;
  }[];
  label: string;
}

export const Dropdown: React.FC<DropdownProps> = ({
  trigger,
  items,
  label
}) => {
  return (
    <DropdownMenu.Root>
      <DropdownMenu.Trigger asChild aria-label={label}>
        {trigger}
      </DropdownMenu.Trigger>
      
      <DropdownMenu.Portal>
        <DropdownMenu.Content
          className="bg-gray-900 backdrop-blur-md rounded-lg p-2 shadow-lg border border-gray-700"
          sideOffset={5}
        >
          {items.map((item) => (
            <DropdownMenu.Item
              key={item.id}
              disabled={item.disabled}
              className="flex items-center gap-2 px-3 py-2 text-white hover:bg-gray-800 rounded cursor-pointer focus:outline-none focus:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
              onClick={item.onClick}
            >
              {item.icon}
              {item.label}
            </DropdownMenu.Item>
          ))}
        </DropdownMenu.Content>
      </DropdownMenu.Portal>
    </DropdownMenu.Root>
  );
};
```

### Sistema de Temas Accesibles

```typescript
// /lib/useTheme.ts
import { useEffect, useState } from 'react';

type Theme = 'dark' | 'light' | 'system';

export function useTheme() {
  const [theme, setTheme] = useState<Theme>('system');
  const [currentTheme, setCurrentTheme] = useState<'dark' | 'light'>('dark');
  
  useEffect(() => {
    // Cargar tema guardado
    const savedTheme = localStorage.getItem('theme') as Theme;
    if (savedTheme) {
      setTheme(savedTheme);
    }
  }, []);
  
  useEffect(() => {
    // Aplicar tema basado en preferencia
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light';
      setCurrentTheme(systemTheme);
      document.documentElement.classList.toggle('dark', systemTheme === 'dark');
    } else {
      setCurrentTheme(theme);
      document.documentElement.classList.toggle('dark', theme === 'dark');
    }
    
    // Guardar preferencia
    localStorage.setItem('theme', theme);
  }, [theme]);
  
  // Toggle para alternar entre claro/oscuro
  const toggleTheme = () => {
    setTheme(currentTheme === 'dark' ? 'light' : 'dark');
  };
  
  // Establecer tema específico
  const setThemePreference = (newTheme: Theme) => {
    setTheme(newTheme);
  };
  
  return { theme, currentTheme, toggleTheme, setThemePreference };
}
```

## Arquitectura Responsive Detallada

### Sistema Responsive

```typescript
// /hooks/useBreakpoint.ts
import { useEffect, useState } from 'react';

type Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';

const breakpointValues = {
  xs: 0,
  sm: 640,
  md: 768,
  lg: 1024,
  xl: 1280,
  '2xl': 1536,
};

export function useBreakpoint() {
  const [breakpoint, setBreakpoint] = useState<Breakpoint>('xs');
  const [width, setWidth] = useState(0);
  
  useEffect(() => {
    const handleResize = () => {
      const windowWidth = window.innerWidth;
      setWidth(windowWidth);
      
      // Determinar breakpoint actual
      if (windowWidth >= breakpointValues['2xl']) {
        setBreakpoint('2xl');
      } else if (windowWidth >= breakpointValues.xl) {
        setBreakpoint('xl');
      } else if (windowWidth >= breakpointValues.lg) {
        setBreakpoint('lg');
      } else if (windowWidth >= breakpointValues.md) {
        setBreakpoint('md');
      } else if (windowWidth >= breakpointValues.sm) {
        setBreakpoint('sm');
      } else {
        setBreakpoint('xs');
      }
    };
    
    // Inicializar
    handleResize();
    
    // Suscribir a resize
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Helpers para comparaciones
  const isAbove = (bp: Breakpoint) => width >= breakpointValues[bp];
  const isBelow = (bp: Breakpoint) => width < breakpointValues[bp];
  
  return { breakpoint, width, isAbove, isBelow };
}
```

## Testing Frontend Efectivo

### Estrategia de Testing

```typescript
// /components/Player/__tests__/PlayerControls.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { PlayerControls } from '../PlayerControls';

describe('PlayerControls', () => {
  test('renders play button when paused', () => {
    render(
      <PlayerControls
        isPlaying={false}
        onPlay={jest.fn()}
        onPause={jest.fn()}
        onNext={jest.fn()}
        onPrevious={jest.fn()}
      />
    );
    
    expect(screen.getByLabelText('Play')).toBeInTheDocument();
    expect(screen.queryByLabelText('Pause')).not.toBeInTheDocument();
  });
  
  test('renders pause button when playing', () => {
    render(
      <PlayerControls
        isPlaying={true}
        onPlay={jest.fn()}
        onPause={jest.fn()}
        onNext={jest.fn()}
        onPrevious={jest.fn()}
      />
    );
    
    expect(screen.getByLabelText('Pause')).toBeInTheDocument();
    expect(screen.queryByLabelText('Play')).not.toBeInTheDocument();
  });
  
  test('calls onPlay when play button is clicked', () => {
    const onPlay = jest.fn();
    
    render(
      <PlayerControls
        isPlaying={false}
        onPlay={onPlay}
        onPause={jest.fn()}
        onNext={jest.fn()}
        onPrevious={jest.fn()}
      />
    );
    
    fireEvent.click(screen.getByLabelText('Play'));
    expect(onPlay).toHaveBeenCalledTimes(1);
  });
  
  // Más tests...
});
```

## Cronograma de Implementación Frontend

### Fase 1: Fundamentos (2 semanas)
- Configuración del proyecto Next.js + TypeScript
- Implementación de sistema de diseño base
- Componentes UI fundamentales
- Estructura de layout principal

### Fase 2: Componentes Core (3 semanas)
- Implementación completa del reproductor
- Sistema de búsqueda y navegación
- Implementación de las principales vistas
- Integración básica con APIs (mocks iniciales)

### Fase 3: Micro-interacciones y Detalles (2 semanas)
- Animaciones y transiciones
- Visualizador de audio
- Mejoras de accesibilidad
- Optimizaciones de carga

### Fase 4: Pulido y Testing (1 semana)
- Testing completo
- Optimización de rendimiento
- Solución de bugs
- Documentación de componentes 